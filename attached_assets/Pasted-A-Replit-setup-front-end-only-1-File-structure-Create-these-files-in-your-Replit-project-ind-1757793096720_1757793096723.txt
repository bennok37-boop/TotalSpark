A) Replit setup (front-end only)
1) File structure

Create these files in your Replit project:

/index.html
/assets/styles.css
/assets/quote.js      ← calculator + payload builder + local storage
/assets/ui.js         ← wiring buttons, showing results, photo previews

2) Give your existing fields stable IDs

Add (or confirm) these IDs in your current HTML:

Step 1 (contact & address)
#fullName #phone #email #address #postcode

Step 2 (service chooser & common fields)
#serviceType #propertyType #propertyCondition #bedrooms #bathrooms #toilets #livingRooms #secondKitchen #internalStairs #furnished #occupied #hmoRooms #wasteBags #addOven #addFridge #addCabinets #addLimescale #addCarpet #addUpholstery #windowsCount #urgent #weekend #above2NoLift #notesOptional #photosUpload (file input; allow multiple)

Commercial-only
#commercialType #areaM2 #roomsCount #toiletsCount

Carpet & Upholstery counts
#c_carpetRooms #c_stairs #c_rugs #c_sofa2 #c_sofa3 #c_armchairs #c_mattresses

Buttons
#nextStep1 #getQuoteBtn #bookNowBtn #newQuoteBtn

Result labels (where the price & details render)
#quoteLow #quoteHigh #quoteBand #quoteIdLabel #crewTimeLabel

(Use your existing markup; you’re just adding IDs so the JS can target them.)

3) Add a results panel (if you don’t already have one)

Place this near the bottom of your page (style however you like):

<section id="resultPanel" style="display:none">
  <h3>Thanks! Your Quote Is Ready</h3>
  <p id="quoteBand">Your Estimated Quote</p>
  <div class="price">
    <span id="quoteLow">£0.00</span> – <span id="quoteHigh">£0.00</span>
  </div>
  <p class="meta"><span id="quoteIdLabel"></span> • <span id="crewTimeLabel"></span></p>
  <div class="actions">
    <a id="bookNowBtn" class="btn btn-primary" href="#" target="_blank" rel="noopener">Book & hold my price</a>
    <button id="newQuoteBtn" class="btn btn-ghost">New Quote</button>
  </div>
</section>

4) Calculator + payload builder (paste into /assets/quote.js)

This doesn’t change your UI. It reads your fields, builds a quote object, and stores it in localStorage. (You can still keep your current calculator; if you prefer to use its numbers, just overwrite est.low/high before calling showResult().)

// /assets/quote.js
window.TS = window.TS || {};

TS.cfg = {
  estimateBand: 0.10,                     // ±10%
  depositUrl: "#",                        // keep placeholder (GHL link later)
  calendarUrl: "#",                       // GHL calendar later
};

// --- Helpers ---
const $ = (id) => document.getElementById(id);
const val = (id) => $(id) ? $(id).value.trim() : "";
const num = (id) => $(id) ? Number($(id).value || 0) : 0;
const chk = (id) => $(id) ? !!$(id).checked : false;
const money = (n) => "£" + n.toFixed(2);

// --- Minimal pricing config (aligns with our earlier spec) ---
TS.pricing = {
  domesticMin: 80, commercialMin: 120, vat: 0, // handle VAT later in GHL if needed
  eot: { studio:{£:100,h:3}, 1:{£:120,h:4}, 2:{£:160,h:6}, 3:{£:220,h:8}, 4:{£:280,h:10}, "5plus":{£:340,h:12} },
  deep: { studio:{£:100,h:3}, 1:{£:100,h:4}, 2:{£:150,h:6}, 3:{£:200,h:8}, 4:{£:260,h:10}, "5plus":{£:320,h:12} },
  propertyTypeFactor: { flat:1.0, terraced:1.05, semi:1.10, detached:1.20, maisonette:1.15, townhouse:1.15 },
  conditionFactor: { light:0.9, standard:1.0, heavy:1.2, veryheavy:1.4 },
  extrasPct: { extraBath:0.05, extraBathCap:0.20, secondKitchen:0.10, stairs:0.05, furnished:0.05, occupied:0.10 },
  addons: { oven:35, fridge:20, cabinets:20, limescale:15, windowsPer:3, windowsMin:15 },
  modifiers: { urgent:0.20, weekend:0.10, stairsNoLift:10, outerArea:10, bundleCarpetWithEoT:0.10 },
  commercial: {
    rate: 20, minHours: 2,
    m2ph: { office:60, retail:55, education:50, healthcare:45, hospitality:50, afterbuilders:30 },
    afterBuildersConsumables: 0.20
  },
  carpets: { room:25, stairs:30, rug:30, sofa2:40, sofa3:55, armchair:20, mattress:35 }
};

// --- Core compute (domestic/commercial/carpets) ---
TS.computeQuote = function(input){
  const cfg = TS.pricing;
  let subtotal = 0, hours = 0, line = [];

  const add = (label, amt) => { if (Math.abs(amt)>0.0001){ line.push({label, amount:+amt.toFixed(2)}); subtotal+=amt; } };

  // DOMESTIC (End of Tenancy / Deep)
  if (["End of Tenancy Cleaning","Deep Cleaning"].includes(input.service)){
    const table = input.service === "End of Tenancy Cleaning" ? cfg.eot : cfg.deep;
    const key = (input.bedrooms==="studio"?"studio": (Number(input.bedrooms)>=5?"5plus": String(input.bedrooms||1)));
    const base = table[key];
    // scale by property type & condition & structure
    const pt = cfg.propertyTypeFactor[(input.property_type||"flat").toLowerCase()] || 1;
    const cond = cfg.conditionFactor[(input.condition||"standard").toLowerCase()] || 1;
    const baths = Math.max(1, Number(input.bathrooms||1));
    const bathPct = Math.min(cfg.extrasPct.extraBathCap, (baths-1)*cfg.extrasPct.extraBath);
    let mult = pt * cond * (1 + bathPct);
    if (input.second_kitchen) mult *= (1 + cfg.extrasPct.secondKitchen);
    if (input.internal_stairs) mult *= (1 + cfg.extrasPct.stairs);
    if (input.furnished) mult *= (1 + cfg.extrasPct.furnished);
    if (input.occupied) mult *= (1 + cfg.extrasPct.occupied);

    const base£ = base.£ * mult;
    const baseH = base.h * mult;
    add(`${input.service} (${key} beds)`, base£);
    hours += baseH;

    if (input.add_oven) add("Oven deep clean", cfg.addons.oven);
    if (input.add_fridge) add("Fridge/Freezer", cfg.addons.fridge);
    if (input.add_cabinets) add("Inside cabinets", cfg.addons.cabinets);
    if (input.add_limescale) add("Limescale pack", cfg.addons.limescale);
    if (Number(input.windows_count)>0){
      add(`Interior windows x${input.windows_count}`, Math.max(cfg.addons.windowsMin, input.windows_count*cfg.addons.windowsPer));
    }
  }

  // COMMERCIAL / OFFICE
  if (input.service === "Commercial/Office Cleaning"){
    const cat = (input.commercial_type||"office").toLowerCase();
    const m2ph = cfg.commercial.m2ph[cat] || cfg.commercial.m2ph.office;
    let hrs = Math.max(cfg.commercial.minHours, (Number(input.area_m2||0) > 0 ? input.area_m2/m2ph : (input.rooms_count||0)*0.75));
    // Condition factor
    const cond = cfg.conditionFactor[(input.condition||"standard").toLowerCase()] || 1;
    hrs *= cond;
    hours += hrs;
    const base = hrs * cfg.commercial.rate;
    add(`Commercial – ${cat} (${hrs.toFixed(1)} hrs @ £${cfg.commercial.rate}/hr)`, base);
    if (cat === "afterbuilders") add("After builders consumables", base*cfg.commercial.afterBuildersConsumables);
  }

  // CARPET & UPHOLSTERY (standalone)
  if (input.service === "Carpet & Upholstery Cleaning"){
    const c = cfg.carpets, it = input.cu||{};
    add(`Carpet rooms x${it.carpet_rooms||0}`, (it.carpet_rooms||0)*c.room);
    add(`Stairs & landing x${it.stairs||0}`, (it.stairs||0)*c.stairs);
    add(`Rugs x${it.rugs||0}`, (it.rugs||0)*c.rug);
    add(`2-seater sofas x${it.sofa2||0}`, (it.sofa2||0)*c.sofa2);
    add(`3-seater sofas x${it.sofa3||0}`, (it.sofa3||0)*c.sofa3);
    add(`Armchairs x${it.armchairs||0}`, (it.armchairs||0)*c.armchair);
    add(`Mattresses x${it.mattresses||0}`, (it.mattresses||0)*c.mattress);
  }

  // Surcharges
  if (input.urgent) subtotal *= (1 + cfg.modifiers.urgent);
  if (input.weekend) subtotal *= (1 + cfg.modifiers.weekend);
  if (input.above_2nd_no_lift) add("Access surcharge (no lift, 3rd+)", cfg.modifiers.stairsNoLift);

  // Minimums
  const min = (input.service === "Commercial/Office Cleaning") ? cfg.commercialMin :
              (input.service === "Carpet & Upholstery Cleaning") ? cfg.domesticMin : cfg.domesticMin;
  if (subtotal < min) { add("Minimum job value adjustment", (min - subtotal)); }

  // Suggest crew/time (4 cleaner-hours per cleaner)
  const crew = Math.max(1, Math.ceil((hours||0)/4));
  const duration = hours ? Math.ceil(hours/crew) : null;

  const total = subtotal; // VAT omitted here (handled in invoicing if needed)
  const band = TS.cfg.estimateBand;
  return {
    lineItems: line,
    subtotal:+subtotal.toFixed(2),
    total:+total.toFixed(2),
    low:+(total*(1-band)).toFixed(2),
    high:+(total*(1+band)).toFixed(2),
    crew, duration
  };
};

// Build a payload from current form values
TS.buildPayload = function(){
  const service = val('serviceType');
  const payload = {
    service,
    property_type: val('propertyType'),
    condition: val('propertyCondition'),
    bedrooms: val('bedrooms'),
    bathrooms: val('bathrooms'),
    toilets: num('toilets') || num('toiletsCount'),
    living_rooms: num('livingRooms'),
    second_kitchen: chk('secondKitchen'),
    internal_stairs: chk('internalStairs'),
    furnished: chk('furnished'),
    occupied: chk('occupied'),
    hmo_rooms: num('hmoRooms'),
    waste_bags: num('wasteBags'),
    add_oven: chk('addOven'),
    add_fridge: chk('addFridge'),
    add_cabinets: chk('addCabinets'),
    add_limescale: chk('addLimescale'),
    add_carpet: chk('addCarpet'),
    add_upholstery: chk('addUpholstery'),
    windows_count: num('windowsCount'),
    urgent: chk('urgent'),
    weekend: chk('weekend'),
    above_2nd_no_lift: chk('above2NoLift'),
    address_full: val('address'),
    postcode: val('postcode'),
    notes: val('notesOptional'),
  };

  if (service === "Commercial/Office Cleaning"){
    payload.commercial_type = val('commercialType');
    payload.area_m2 = num('areaM2');
    payload.rooms_count = num('roomsCount');
  }
  if (service === "Carpet & Upholstery Cleaning"){
    payload.cu = {
      carpet_rooms: num('c_carpetRooms'),
      stairs: num('c_stairs'),
      rugs: num('c_rugs'),
      sofa2: num('c_sofa2'),
      sofa3: num('c_sofa3'),
      armchairs: num('c_armchairs'),
      mattresses: num('c_mattresses')
    };
  }
  return payload;
};

// Persist to localStorage (so you can resume / push to GHL later)
TS.saveQuote = function(quote){
  localStorage.setItem(`TS_QUOTE_${quote.id}`, JSON.stringify(quote));
  localStorage.setItem(`TS_QUOTE_LAST`, quote.id);
};

// Stub: this is where GHL push will go later
TS.pushToGHL = function(quote){
  // NO-OP for now. Later, we’ll submit hidden GHL forms here.
  console.log("GHL push stub:", quote);
};

5) UI wiring (paste into /assets/ui.js)

This glues your buttons to the calculator and shows the result panel; it also handles photo thumbnails (stored only for preview now).

// /assets/ui.js
(function(){
  const $ = (id) => document.getElementById(id);

  // Step 1 → capture (optional: quick auto-save)
  $('nextStep1')?.addEventListener('click', () => {
    // You can add lightweight validation here if needed.
  });

  // Photos preview (client-side only)
  const photoInput = $('photosUpload');
  if (photoInput){
    photoInput.addEventListener('change', (e) => {
      // Optional: render thumbnails next to the uploader
      // (Skipping DOM for brevity; previews aren’t required)
    });
  }

  // Get Quote → compute, render, save, (later) push to GHL
  $('getQuoteBtn')?.addEventListener('click', (e) => {
    e.preventDefault();

    const formData = TS.buildPayload();
    const result = TS.computeQuote(formData);

    const quote = {
      id: "TS-" + Date.now(),
      createdAt: new Date().toISOString(),
      contact: {
        name: $('fullName')?.value.trim(),
        email: $('email')?.value.trim(),
        phone: $('phone')?.value.trim()
      },
      address: $('address')?.value.trim(),
      postcode: $('postcode')?.value.trim(),
      serviceData: formData,
      estimate: { low: result.low, high: result.high, subtotal: result.subtotal, crew: result.crew, duration: result.duration },
      resumeUrl: window.location.href + "?qid=" + encodeURIComponent("TS-" + Date.now())
    };

    // Render result panel
    $('quoteLow').textContent  = money(result.low);
    $('quoteHigh').textContent = money(result.high);
    $('quoteIdLabel').textContent = quote.id;
    $('crewTimeLabel').textContent = `${result.crew} cleaners • ~${result.duration || "—"} hrs`;
    $('resultPanel').style.display = 'block';
    window.scrollTo({ top: $('resultPanel').offsetTop - 40, behavior: 'smooth' });

    // Save for resume / later push
    TS.saveQuote(quote);

    // (Later) push to HighLevel here
    TS.pushToGHL(quote);
  });

  // Book button (will point to GHL Calendar later)
  $('bookNowBtn')?.addEventListener('click', () => {
    const link = TS.cfg.calendarUrl || "#";
    if (link === "#") alert("Booking calendar will be connected next.");
  });

  // New Quote → reset UI
  $('newQuoteBtn')?.addEventListener('click', () => {
    $('resultPanel').style.display = 'none';
    window.scrollTo({ top: 0, behavior: 'smooth' });
  });

  // Helper to format money (same as in quote.js)
  function money(n){ return "£" + Number(n).toFixed(2); }
})();

6) Include the scripts in your index.html

At the end of the <body>:

<script src="/assets/quote.js"></script>
<script src="/assets/ui.js"></script>

7) Quick test

Fill Step-1 and Step-2, click Get Quote → the result panel shows the band and crew/time.

Open DevTools → check localStorage.TS_QUOTE_LAST and TS_QUOTE_<id> exist.

Click Book & hold my price → you’ll see the placeholder alert (we’ll wire GHL calendar next).

B) What you’ll have after Replit phase

On-screen estimate with a clean result panel.

Quote object saved locally (ready to push).

Photos accepted and previewed (optional).

No dependency on GHL yet.